import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'eclipse'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.33'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
    // withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    mcVersion = '1.12.2'

    // MCP Mappings
    mcpMappingChannel = 'stable'
    mcpMappingVersion = '39'

    // Set username here, the UUID will be looked up automatically
    username = 'Developer'

    // Add any additional tweaker classes here
    // extraTweakClasses.add('org.spongepowered.asm.launch.MixinTweaker')

    // Add various JVM arguments here for runtime
    def args = ["-ea:${project.group}"]
    if (project.use_coremod.toBoolean()) {
        args << '-Dfml.coreMods.load=' + coremod_plugin_class_name
    }
    if (project.use_mixins.toBoolean()) {
        args << '-Dmixin.hotSwap=true'
        args << '-Dmixin.checks.interfaces=true'
        args << '-Dmixin.debug.export=true'
    }
    extraRunJvmArguments.addAll(args)

    // Include and use dependencies' Access Transformer files
    useDependencyAccessTransformers = true

    // Add any properties you want to swap out for a dynamic value at build time here
    // Any properties here will be added to a class at build time, the name can be configured below
    injectedTags.put('MOD_ID', project.mod_id)
    injectedTags.put('MOD_NAME', project.mod_name)
    injectedTags.put('VERSION', project.version)
}

// Generate a group.mod_id.Tags class
tasks.injectTags.configure {
    // Change Tags class' name here:
    outputClassName.set("${project.group}.${project.mod_id}.Tags")
}

repositories {
    maven {
        name 'CleanroomMC Maven'
        url 'https://maven.cleanroommc.com'
    }
    maven {
        name 'SpongePowered Maven'
        url 'https://repo.spongepowered.org/maven'
    }
    maven {
        name 'CurseMaven'
        url 'https://cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name = 'Mod Maven'
        url = 'https://modmaven.dev'
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    mavenLocal() // Must be last for caching to work
}

dependencies {
    // Libraries
    if (project.use_assetmover.toBoolean()) {
        implementation 'com.cleanroommc:assetmover:2.5'
    }
    if (project.use_mixins.toBoolean()) {
        implementation 'zone.rong:mixinbooter:9.1'
    }
    implementation 'com.cleanroommc:configanytime:2.0'

    implementation 'com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.4.2'
    embed 'com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.4.2'
    implementation 'com.udojava:EvalEx:2.7'
    embed 'com.udojava:EvalEx:2.7'

    // Mods
    compileOnly rfg.deobf('cofh:CoFHCore:1.12.2-+:universal')
    compileOnly rfg.deobf('com.teamacronymcoders.base:base:1.12.2-3.14.0')
    compileOnly rfg.deobf('com.teamacronymcoders:ContentTweaker:1.12.2-4.10.0')
    compileOnly rfg.deobf('CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.20.684')
    compileOnly rfg.deobf('curse.maven:advent-of-ascension-311054:3054253')
    compileOnly rfg.deobf('curse.maven:abyssalcraft-53686:3425234')
    compileOnly rfg.deobf('curse.maven:astral-sorcery-241721:3044416')
    compileOnly rfg.deobf('curse.maven:atomicstrykers-infernal-mobs-227875:3431758')
    compileOnly rfg.deobf('curse.maven:baubles-227083:2518667')
    compileOnly rfg.deobf('curse.maven:binnies-mods-223525:2916129')
    compileOnly rfg.deobf('curse.maven:biomes-o-plenty-220318:2842510')
    compileOnly rfg.deobf('curse.maven:blood-magic-224791:2822288')
    compileOnly rfg.deobf('curse.maven:botania-225643:3330934')
    compileOnly rfg.deobf('curse.maven:ceramics-250617:3158763')
    compileOnly rfg.deobf('curse.maven:chameleon-230497:2450900')
    compileOnly rfg.deobf('curse.maven:chickens-241941:2537643')
    compileOnly rfg.deobf('curse.maven:codechickenlib-242818:2779848')
    compileOnly rfg.deobf('curse.maven:collective-342584:3533131')
    compileOnly rfg.deobf('curse.maven:cqrepoured-303422:3953103')
    compileOnly rfg.deobf('curse.maven:elementary-staffs-346007:2995593')
    compileOnly rfg.deobf('curse.maven:elenaidodge2-442962:3343308')
    compileOnly rfg.deobf('curse.maven:epic-siege-mod-229449:3356157')
    compileOnly rfg.deobf('curse.maven:forestry-59751:2918418')
    compileOnly rfg.deobf('curse.maven:modtweaker-220954:3840577')
    compileOnly rfg.deobf('curse.maven:nuclearcraft-226254:3784145')
    compileOnly rfg.deobf('curse.maven:openblocks-228816:2699056')
    compileOnly rfg.deobf('curse.maven:opencomputers-223008:5274236')
    compileOnly rfg.deobf('curse.maven:reborn-core-237903:3330308')
    compileOnly rfg.deobf('curse.maven:reskillable-286382:2815686')
    compileOnly rfg.deobf('curse.maven:requious-frakto-336748:3218640')
    compileOnly rfg.deobf('curse.maven:roost-277711:2702080')
    compileOnly rfg.deobf('curse.maven:simpledifficulty-360779:3613814')
    compileOnly rfg.deobf('curse.maven:storage-drawers-223852:2952606')
    compileOnly rfg.deobf('curse.maven:tech-reborn-233564:2966851')
    compileOnly rfg.deobf('curse.maven:thaumcraft-223628:2629023')
    compileOnly rfg.deobf('curse.maven:the-erebus-220698:3211974')
    compileOnly rfg.deobf('curse.maven:thermal-expansion-69163:2926431')
    compileOnly rfg.deobf('slimeknights.mantle:Mantle:1.12-1.3.3.56')
    compileOnly rfg.deobf('slimeknights:TConstruct:1.12.2-2.13.0.190')
    compileOnly rfg.deobf('net.darkhax.bookshelf:Bookshelf-1.12.2:2.3.590')
    compileOnly rfg.deobf('net.darkhax.gamestages:GameStages-1.12.2:2.0.120')
    compileOnly rfg.deobf('net.darkhax.itemstages:ItemStages-1.12.2:2.0.51')
    compileOnly rfg.deobf('net.darkhax.mobstages:MobStages-1.12.2:2.0.13')
    compileOnly rfg.deobf('curse.maven:mcjtylib-233105:2745846')
    compileOnly rfg.deobf('curse.maven:rftools-224641:2861573')
    compileOnly rfg.deobf('curse.maven:rftools-dimensions-240950:2707390')
    compileOnly rfg.deobf('curse.maven:actuallyaditions-228404:2844115')
    compileOnly rfg.deobf('curse.maven:extrautilities-225561:2678374')
    compileOnly rfg.deobf('curse.maven:steamworld-282607:2641200')
    compileOnly 'curse.maven:applecore-224472:2969118'
    compileOnly 'curse.maven:arcanearchives-311357:3057332'
    compileOnly 'curse.maven:bewitchment-285439:3044569'
    compileOnly 'curse.maven:chisel-235279:2915375'
    compileOnly 'curse.maven:cofhworld-271384:2920434'
    compileOnly 'curse.maven:compactmachines-224218:2707509'
    compileOnly 'curse.maven:effortlessbuilding-302113:2847346'
    compileOnly 'curse.maven:endercore-231868:2972849'
    compileOnly 'curse.maven:enderio-64578:2989201'
    compileOnly 'curse.maven:enderstorage-245174:2755787'
    compileOnly 'curse.maven:extrautilities-225561:2678374'
    compileOnly 'curse.maven:forgemultipartcbe-258426:2755790' // aka "CB Multipart"
    compileOnly 'curse.maven:guideapi-228832:2645992'
    compileOnly 'curse.maven:hwyla-253449:2568751'
    compileOnly 'curse.maven:industrialcraft-242638:3078604'
    compileOnly 'curse.maven:ironbackpacks-227049:2564573'
    compileOnly 'curse.maven:mekanism-268560:2835175'
    compileOnly 'curse.maven:modular-routers-250294:2954953'
    compileOnly 'curse.maven:mrtjpcore-229002:2735197'
    compileOnly 'curse.maven:netherchest-268888:2655413'
    compileOnly 'curse.maven:netherrocks-226140:2628297'
    compileOnly 'curse.maven:patchouli-306770:3162874'
    compileOnly 'curse.maven:plustic-376903:4703532'
    compileOnly 'curse.maven:projectredbase-228702:2745545'
    compileOnly 'curse.maven:projectredworld-229049:2745551'
    compileOnly 'curse.maven:quark-243121:2924091'
    compileOnly 'curse.maven:railcraft-51195:3853491'
    compileOnly 'curse.maven:simplyjetpacks2-251792:3294422'
    compileOnly 'curse.maven:tardis-290247:2903453'
    compileOnly 'curse.maven:teslacorelib-254602:2891841'
    compileOnly 'curse.maven:thaumicwonders-316704:2787954'
    compileOnly 'curse.maven:thefarlanders-336432:2805139'
    compileOnly 'curse.maven:thermalfoundation-222880:2926428'
    compileOnly 'curse.maven:thespiceoflife-220811:2571951'
    compileOnly 'curse.maven:tinkerscomplement-272671:2843439'
    compileOnly 'curse.maven:tinyprogressions-250850:2721018'
    compileOnly 'maven.modrinth:industrial-foregoing:1.12.13-237'
    // runtimeOnly 'TechReborn:TechReborn-ModCompatibility-1.12.2:1.4.0.76:universal'
    // runtimeOnly 'curse.maven:openmodslib-228815:2699055'

    if (project.use_mixins.toBoolean()) {
        String mixin = modUtils.enableMixins("zone.rong:mixinbooter:9.1", "universaltweaks.refmap.json")
        api(mixin) {
            transitive = false
        }
        annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
        annotationProcessor 'com.google.guava:guava:24.1.1-jre'
        annotationProcessor 'com.google.code.gson:gson:2.8.6'
        annotationProcessor(mixin) {
            transitive = false
        }
    }
}

// Adds Access Transformer files to tasks
if (project.use_access_transformer.toBoolean()) {
    for (File at : sourceSets.getByName("main").resources.files) {
        if (at.name.toLowerCase().endsWith("_at.cfg")) {
            tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
            tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)
        }
    }
}

processResources {
    // This will ensure that this task is redone when the versions change
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    // Replace various properties in mcmod.info and pack.mcmeta if applicable
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        // Replace version and mcversion
        fcd.expand('version': project.version,
                'mcversion': project.minecraft.version)
    }

    if (project.use_access_transformer.toBoolean()) {
        rename '(.+_at.cfg)', 'META-INF/$1' // Make sure Access Transformer files are in META-INF folder
    }
}

jar {
    manifest {
        def attribute_map = [:]
        if (project.use_coremod.toBoolean()) {
            attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
            if (project.include_mod.toBoolean()) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
                attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == "build"
            }
        }
        if (project.use_access_transformer.toBoolean()) {
            attribute_map['FMLAT'] = project.mod_id + '_at.cfg'
        }
        attributes(attribute_map)
    }
    // Add all embedded dependencies into the jar
    from(provider { configurations.embed.collect { it.isDirectory() ? it : zipTree(it) } })
}

idea {
    module {
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                "1. Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "2. Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
                "3. Run Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient"]
                }
                "4. Run Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [(project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')]
                }
            }
        }
    }
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}
